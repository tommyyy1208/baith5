import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import pyautogui
import time
import threading
import keyboard
import json
import copy

click_sets = {}  # {'T√™n b·ªô': [{'name': 'T√™n v·ªã tr√≠', 'x': x, 'y': y}, ...]}
is_clicking = False  # D√πng ƒë·ªÉ d·ª´ng khi nh·∫•n F9

# L·∫•y b·ªô ƒëang ch·ªçn
def get_current_set():
    return set_selector.get()

# L·∫Øng nghe ph√≠m F8 ƒë·ªÉ th√™m v·ªã tr√≠
def listen_for_hotkeys():
    while True:
        keyboard.wait('F8')
        x, y = pyautogui.position()
        current_set = get_current_set()
        if current_set:
            name = position_name_entry.get().strip()
            if not name:
                name = f"V·ªã tr√≠ {len(click_sets[current_set]) + 1}"
            click_sets[current_set].append({"name": name, "x": x, "y": y})
            if get_current_set() == current_set:
                update_position_list()
        else:
            messagebox.showwarning("Ch∆∞a ch·ªçn b·ªô", "H√£y ch·ªçn ho·∫∑c t·∫°o m·ªôt b·ªô nh·∫•p tr∆∞·ªõc.")

# L·∫Øng nghe ph√≠m F9 ƒë·ªÉ d·ª´ng auto click
def listen_for_stop():
    global is_clicking
    while True:
        keyboard.wait('F9')
        is_clicking = False

# B·∫Øt ƒë·∫ßu click
def start_clicking():
    global is_clicking
    current_set = get_current_set()
    if not current_set or current_set not in click_sets:
        messagebox.showwarning("L·ªói", "Vui l√≤ng ch·ªçn m·ªôt b·ªô nh·∫•p h·ª£p l·ªá.")
        return

    try:
        delay = float(delay_entry.get())
        repeat = int(repeat_entry.get())
    except ValueError:
        messagebox.showerror("L·ªói", "Delay v√† s·ªë l·∫ßn l·∫∑p ph·∫£i l√† s·ªë.")
        return

    if not click_sets[current_set]:
        messagebox.showinfo("Tr·ªëng", "B·ªô nh·∫•p hi·ªán t·∫°i kh√¥ng c√≥ v·ªã tr√≠ n√†o.")
        return

    is_clicking = True

    def click_loop():
        nonlocal repeat
        for r in range(repeat):
            if not is_clicking:
                break
            for item in click_sets[current_set]:
                if not is_clicking:
                    break
                x = item.get("x", 0)
                y = item.get("y", 0)
                pyautogui.click(x, y)
                time.sleep(delay)
        print("K·∫øt th√∫c auto click.")

    threading.Thread(target=click_loop, daemon=True).start()

# T·∫°o b·ªô nh·∫•p m·ªõi
def create_new_set():
    name = new_set_entry.get().strip()
    if not name:
        messagebox.showerror("L·ªói", "T√™n b·ªô kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.")
        return
    if name in click_sets:
        messagebox.showwarning("T·ªìn t·∫°i", "B·ªô nh·∫•p ƒë√£ t·ªìn t·∫°i.")
        return

    current_set = get_current_set()
    if copy_from_current_var.get() and current_set in click_sets:
        click_sets[name] = copy.deepcopy(click_sets[current_set])
    else:
        click_sets[name] = []

    update_set_selector()
    set_selector.set(name)
    update_position_list()
    new_set_entry.delete(0, tk.END)

# Xo√° b·ªô nh·∫•p
def delete_set():
    current = get_current_set()
    if not current:
        return
    if messagebox.askyesno("X√°c nh·∫≠n", f"X√≥a b·ªô '{current}'?"):
        click_sets.pop(current, None)
        update_set_selector()
        position_list.delete(0, tk.END)

# Xo√° c√°c v·ªã tr√≠ ƒë√£ ch·ªçn trong danh s√°ch
def delete_selected_positions():
    current = get_current_set()
    if current not in click_sets:
        return

    selected_indices = list(position_list.curselection())
    if not selected_indices:
        messagebox.showinfo("Ch∆∞a ch·ªçn", "Vui l√≤ng ch·ªçn v·ªã tr√≠ c·∫ßn xo√°.")
        return

    for index in reversed(selected_indices):
        try:
            del click_sets[current][index]
        except IndexError:
            continue

    update_position_list()

# C·∫≠p nh·∫≠t danh s√°ch v·ªã tr√≠ hi·ªÉn th·ªã
def update_position_list(event=None):
    position_list.delete(0, tk.END)
    current = get_current_set()
    if current in click_sets:
        for item in click_sets[current]:
            name = item.get("name", "Kh√¥ng t√™n")
            x = item.get("x", 0)
            y = item.get("y", 0)
            position_list.insert(tk.END, f"{name} - ({x}, {y})")

# C·∫≠p nh·∫≠t combobox ch·ªçn b·ªô
def update_set_selector():
    set_selector['values'] = list(click_sets.keys())
    if click_sets:
        set_selector.set(list(click_sets.keys())[0])
    else:
        set_selector.set('')
    update_position_list()

# L∆∞u ra file JSON
def save_to_file():
    path = filedialog.asksaveasfilename(defaultextension=".json", filetypes=[("JSON files", "*.json")])
    if path:
        with open(path, 'w') as f:
            json.dump(click_sets, f, indent=2)
        messagebox.showinfo("ƒê√£ l∆∞u", "D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u.")

# M·ªü file JSON
def load_from_file():
    path = filedialog.askopenfilename(filetypes=[("JSON files", "*.json")])
    if path:
        try:
            with open(path, 'r') as f:
                data = json.load(f)
                global click_sets
                click_sets = {k: v for k, v in data.items() if isinstance(v, list)}
                update_set_selector()
                messagebox.showinfo("Th√†nh c√¥ng", "T·∫£i d·ªØ li·ªáu th√†nh c√¥ng.")
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ ƒë·ªçc file: {e}")

# ================= GUI =================
root = tk.Tk()
root.title("üñ±Ô∏è Auto Clicker N√¢ng Cao (F8: Th√™m, F9: D·ª´ng)")
root.geometry("500x720")

# --- T·∫°o/Xo√° b·ªô ---
tk.Label(root, text="T√™n b·ªô nh·∫•p m·ªõi:").pack()
new_set_entry = tk.Entry(root)
new_set_entry.pack(pady=5)

# ‚úÖ Checkbox: sao ch√©p t·ª´ b·ªô hi·ªán t·∫°i
copy_from_current_var = tk.BooleanVar()
tk.Checkbutton(root, text="‚úÖ Sao ch√©p v·ªã tr√≠ t·ª´ b·ªô hi·ªán t·∫°i", variable=copy_from_current_var).pack()

tk.Button(root, text="‚ûï T·∫°o b·ªô m·ªõi", command=create_new_set).pack(pady=2)
tk.Button(root, text="üóëÔ∏è Xo√° b·ªô hi·ªán t·∫°i", command=delete_set).pack(pady=2)

# --- Ch·ªçn b·ªô ---
tk.Label(root, text="Ch·ªçn b·ªô nh·∫•p:").pack()
set_selector = ttk.Combobox(root, state="readonly")
set_selector.pack(pady=5)
set_selector.bind("<<ComboboxSelected>>", update_position_list)

# --- Nh·∫≠p t√™n v·ªã tr√≠ ---
tk.Label(root, text="T√™n v·ªã tr√≠ m·ªõi:").pack()
position_name_entry = tk.Entry(root)
position_name_entry.pack(pady=5)

# --- Danh s√°ch v·ªã tr√≠ ---
position_list = tk.Listbox(root, width=50, height=10, selectmode=tk.MULTIPLE)
position_list.pack(pady=5)
tk.Button(root, text="‚ùå Xo√° v·ªã tr√≠ ƒë√£ ch·ªçn", command=delete_selected_positions).pack(pady=2)

# --- Delay v√† l·∫∑p l·∫°i ---
tk.Label(root, text="Delay gi·ªØa c√°c click (gi√¢y):").pack()
delay_entry = tk.Entry(root)
delay_entry.insert(0, "0.5")
delay_entry.pack(pady=2)

tk.Label(root, text="S·ªë l·∫ßn l·∫∑p l·∫°i to√†n b·ªô b·ªô nh·∫•p:").pack()
repeat_entry = tk.Entry(root)
repeat_entry.insert(0, "1")
repeat_entry.pack(pady=2)

# --- N√∫t thao t√°c ---
tk.Button(root, text="‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu Click", command=start_clicking).pack(pady=10)

tk.Label(root, text="üí° Nh·∫•n F8 ƒë·ªÉ th√™m v·ªã tr√≠ chu·ªôt.\n‚õî Nh·∫•n F9 ƒë·ªÉ d·ª´ng auto click.", fg="gray").pack(pady=5)

# --- L∆∞u / M·ªü file ---
tk.Button(root, text="üíæ L∆∞u b·ªô nh·∫•p ra file", command=save_to_file).pack(pady=2)
tk.Button(root, text="üìÇ M·ªü file b·ªô nh·∫•p", command=load_from_file).pack(pady=2)

# --- Kh·ªüi ch·∫°y lu·ªìng l·∫Øng nghe ph√≠m n√≥ng ---
threading.Thread(target=listen_for_hotkeys, daemon=True).start()
threading.Thread(target=listen_for_stop, daemon=True).start()

root.mainloop()
